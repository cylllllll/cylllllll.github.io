<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on cy&#39;s Blog 🍉</title>
    <link>https://cylllllll.github.io/categories/java/</link>
    <description>Recent content in Java on cy&#39;s Blog 🍉</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Copyright © 2021, all rights reserved.</copyright>
    <lastBuildDate>Tue, 02 Apr 2019 23:00:00 +0000</lastBuildDate><atom:link href="https://cylllllll.github.io/categories/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>easyexcel</title>
      <link>https://cylllllll.github.io/post/easyexcel/</link>
      <pubDate>Tue, 02 Apr 2019 23:00:00 +0000</pubDate>
      
      <guid>https://cylllllll.github.io/post/easyexcel/</guid>
      <description>最近项目要实现大数据量的导入导出，试用了一下easyexcel感觉还挺好用的。
easyexcel是 Alibaba 的开源项目，项目地址 ：https://github.com/alibaba/easyexcel
1. 依赖 首先需要添加依赖，推荐使用最新的，可以在Maven仓库中查询；
&amp;lt;!-- https://mvnrepository.com/artifact/com.alibaba/easyexcel --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;easyexcel&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.1.1&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 2. 优势  Java解析、生成Excel比较有名的框架有Apache poi、jxl。但他们都存在一个严重的问题就是非常的耗内存，poi有一套SAX模式的API可以一定程度的解决一些内存溢出的问题，但POI还是有一些缺陷，比如07版Excel解压缩以及解压后存储都是在内存中完成的，内存消耗依然很大。easyexcel重写了poi对07版Excel的解析，能够原本一个3M的excel用POI sax依然需要100M左右内存降低到KB级别，并且再大的excel不会出现内存溢出，03版依赖POI的sax模式。在上层做了模型转换的封装，让使用者更加简单方便。
  读任意大小的03、07版Excel不会OO 读Excel自动通过注解，把结果映射为java模型 写Excel时候自定义是否需要写表头 写Excel通过注解将表头自动写入Excel 写任意大07版Excel不会OOM 写小量数据的03版Excel（不要超过2000行）  #3. 自定义类
  Temple
作为模版可以将字段含义写入，在导入导出时可以讲导入导出内容与模版中实体类映射，也可作为模版导出；
public class Temple extends BaseRowModel { @ExcelProperty(value = &amp;#34;姓名&amp;#34; ,index = 0) private String name; @ExcelProperty(value = &amp;#34;年龄&amp;#34;,index = 1) private String age; @ExcelProperty(value = &amp;#34;邮箱&amp;#34;,index = 2) private String email; @ExcelProperty(value = &amp;#34;地址&amp;#34;,index = 3) private String address; @ExcelProperty(value = &amp;#34;性别&amp;#34;,index = 4) private String sax; @ExcelProperty(value = &amp;#34;高度&amp;#34;,index = 5) private String heigh; @ExcelProperty(value = &amp;#34;备注&amp;#34;,index = 6) private String last; }   ExcelListener</description>
    </item>
    
  </channel>
</rss>
